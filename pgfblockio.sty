%%
%%
%% Copyright (C) 2021 by Stanislas Bertrand
%%
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%%
%%

\ProvidesPackage{pgfblockio}[2021/05/21 v1.1 Draw Block Diagram with Input/Output]
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\RequirePackage{tikz}
\usetikzlibrary{%
  fit,calc,%
  positioning, shapes.geometric%
}

%
% ===================================== PGF Keyes for blkio
%

\def\blkioset#1{\pgfqkeys{/blkio}{#1}}
\def\blkio@blk@set#1{\pgfqkeys{/blkio/block}{#1}}
\def\blkio@io@set#1{\pgfqkeys{/blkio/io}{#1}}

\def\blkio@keydef#1#2{\pgfkeyssetvalue{/blkio/#1}{#2}}
\def\blkio@blk@keydef#1#2{\pgfkeyssetvalue{/blkio/block/#1}{#2}}
\def\blkio@io@keydef#1#2{\pgfkeyssetvalue{/blkio/io/#1}{#2}}

\def\blkiovalueof#1{\pgfkeysvalueof{/blkio/#1}}
\def\blkio@blk@valueof#1{\pgfkeysvalueof{/blkio/block/#1}}
\def\blkio@io@valueof#1{\pgfkeysvalueof{/blkio/io/#1}}

\newif\ifblkio@debug
\blkioset{debug/.is if=blkio@debug}
\def\blkio@debug#1{%
	\ifblkio@debug
		\typeout{#1}
	\fi
}

\def\blkio@PackageError#1{%
  \PackageError{pgfblockio}{#1}{}%
}
\def\blkio@PackageWarning#1{%
  \PackageWarning{pgfblockio}{#1}%
}

\blkioset{.unknown/.code={
	\blkio@PackageWarning{Unknown block io key `\pgfkeyscurrentkeyRAW` with value `#1`}
	}
}

\tikzset{blkio@style/.code={\tikzset{#1}}}

%
% ===================================== Global CS
%

\newlength\blkio@node@dim@x
\newlength\blkio@node@dim@y

%
% ===================================== Global Keyes
%

\blkioset{every io space/.code={\def\blkio@io@space{#1}}}
\def\blkio@io@space{3mm}

\tikzset{every block text/.style={align=center}}
\tikzset{every block shape/.style={draw,
									minimum width=0pt, minimum height=0pt,
									inner sep=0pt,outer sep=0pt
									}}
\tikzset{every block/.style={}}

\tikzset{every iopin text/.style={align=center,
									inner sep=1pt,
									outer sep=0}}
\tikzset{every iopin/.style={draw,
							iopin,
							inner sep=0,
							outer sep=0}}

\tikzset{every link/.style={}}

%
% ===================================== Global Macro
%

\def\blkio@node@place#1#2#3{
	\edef\pgfpositionnodelatername{\csname#1@node@name\endcsname}
	\edef\pgfpositionnodelaterminx{\csname#1@node@minx\endcsname}
	\edef\pgfpositionnodelaterminy{\csname#1@node@miny\endcsname}
	\edef\pgfpositionnodelatermaxx{\csname#1@node@maxx\endcsname}
	\edef\pgfpositionnodelatermaxy{\csname#1@node@maxy\endcsname}
	\setbox\pgfpositionnodelaterbox=\box\csname#1@node@box\endcsname
	
	\blkio@debug{Node Place '#1' at (#2,#3)}
	\pgfpositionnodenow{\pgfpoint{#2}{#3}}
}

\def\blkio@node@calc@dim#1{

	\pgfmathsetlength{\global\blkio@node@dim@x}{\csname#1@node@maxx\endcsname-\csname#1@node@minx\endcsname}
	\pgfmathsetlength{\global\blkio@node@dim@y}{\csname#1@node@maxy\endcsname-\csname#1@node@miny\endcsname}

	\blkio@debug{Node Dimension '#1' ( \the\blkio@node@dim@x , \the\blkio@node@dim@y )}
}

\def\blkio@name@def{blkio-name}
\def\@in@string#1#2{
	\begingroup
	\edef\@temp{
		\endgroup
		\noexpand\in@{#1}{#2}
	}
	\@temp
}

\def\blkio@name@check#1#2{
	\def\blkio@name@def{#1}
	\ifx \blkio@name@def\empty
		\blkio@PackageWarning{'#2' as name}
		\edef\blkio@name@def{#2}
	\else	
		\edef\blkio@name@def{\detokenize{#1}}
		\@in@string{\@backslashchar}{\blkio@name@def}
		\ifin@
			\blkio@PackageWarning{'#2' as name vs '\blkio@name@def'}
			\edef\blkio@name@def{#2}
		\fi
		
%		\@in@string{\detokenize{\\}}{\blkio@name@def}
%		\ifin@
%			\blkio@PackageWarning{'#2' as name}
%			\def\blkio@name@def{#2}
%		\fi
	\fi
}

%
% ===================================== Block CS
%
\newcount\blkio@blk@count
\newlength\blkio@blk@width
\newlength\blkio@blk@height

%
% ===================================== Block Keyes
%

\blkio@blk@set{.unknown/.code={
	\blkio@PackageWarning{Unknown block key `\pgfkeyscurrentkeyRAW` with value `#1` }
	}
}

\blkio@blk@set{.search also={/blkio}}

\blkio@blk@set{at/.code={
		\tikz@scan@one@point\blkio@blk@set@at#1
	}
}
\def\blkio@blk@set@at#1{
	\def\blkio@blk@at{#1}
}


\blkio@blk@set{min width/.code=\blkio@blk@set@min@width{#1}}
\def\blkio@blk@set@min@width#1{
	\pgfmathsetlengthmacro\@min@dim{#1}
	\ifdim\blkio@blk@width<\@min@dim\relax
		\pgfmathsetlength{\global\blkio@blk@width}{\@min@dim}
	\fi
}

\blkio@blk@set{min height/.code=\blkio@blk@set@min@height{#1}}
\def\blkio@blk@set@min@height#1{
	\pgfmathsetlengthmacro\@min@dim{#1}
	\ifdim\blkio@blk@height<\@min@dim\relax
		\pgfmathsetlength{\global\blkio@blk@height}{\@min@dim}
	\fi
}

\blkio@blk@set{min size/.code={
		\blkio@blk@set@min@width{#1}
		\blkio@blk@set@min@height{#1}
	}
}

% defaults to 3pt in blkio@blk@XXX@init
\blkio@blk@set{min depth north/.code={\pgfmathsetlength{\blkio@blk@north@depth@min}{#1}}}
\blkio@blk@set{min depth east/.code={\pgfmathsetlength{\blkio@blk@east@depth@min}{#1}}}
\blkio@blk@set{min depth west/.code={\pgfmathsetlength{\blkio@blk@west@depth@min}{#1}}}
\blkio@blk@set{min depth south/.code={\pgfmathsetlength{\blkio@blk@south@depth@min}{#1}}}

\blkio@blk@set{inner sep/.code=\def\blkio@blk@inner@sep{#1}}
\def\blkio@blk@inner@sep{5pt}

\blkio@blk@set{outer sep/.code=\def\blkio@blk@outer@sep{#1}}
\def\blkio@blk@outer@sep{1pt}

\blkio@blk@set{in sep/.code=\def\blkio@blk@in@sep{#1}}
\def\blkio@blk@in@sep{5mm}

\blkio@blk@set{out sep/.code=\def\blkio@blk@out@sep{#1}}
\def\blkio@blk@out@sep{5mm}

\blkio@blk@set{fit/.code=\blkio@lib@fit{#1}}

\def\blkio@lib@fit#1{%
	% See tikzlibraryfit
	\pgf@xb=-16000pt\relax%
	\pgf@xa=16000pt\relax%
	\pgf@yb=-16000pt\relax%
	\pgf@ya=16000pt\relax%
	%
	% Now iterate over the coordinates
	\tikz@lib@fit@scan#1\pgf@stop%
	% Now, let's see what has happened
	\ifdim\pgf@xa>\pgf@xa%
		% Nothing... Ok, let's just ignore this.
	\else%
		% Ok, compute center and width and height
		\pgf@x=\pgf@xb%
		\advance\pgf@x by-\pgf@xa%
		\pgf@y=\pgf@yb%
		\advance\pgf@y by-\pgf@ya%
		\advance\pgf@xa by.5\pgf@x%
		\advance\pgf@ya by.5\pgf@y%

		{%
			\pgftransforminvert%
			\pgf@pos@transform{\pgf@xa}{\pgf@ya}%
			\global\pgf@xa\pgf@xa
			\global\pgf@ya\pgf@ya
		}

		\blkio@blk@set@at{\pgfqpoint{\pgf@xa}{\pgf@ya}}
		\blkio@blk@set@min@width{\pgf@x}
		\blkio@blk@set@min@height{\pgf@y}
	\fi%
}%

\blkio@blk@set{name/.code=\def\blkio@blk@name{#1}}

\blkio@blk@set{anchor/.code=\def\blk@blk@anchor{#1}}
\def\blk@blk@anchor{center}

\blkio@blk@set{text anchor/.code=\def\blk@blk@text@anchor{#1}}
\def\blk@blk@text@anchor{center}

\blkio@blk@set{text style/.code=\def\blkio@blk@text@style{#1}}
\def\blkio@blk@text@style{}

\blkio@blk@set{block style/.code=\def\blkio@blk@style{#1}}
\def\blkio@blk@style{}

\blkio@blk@set{style/.forward to=/blkio/block/shape style}
\blkio@blk@set{shape style/.code=\def\blkio@shape@style{#1}}
\def\blkio@shape@style{}

\blkio@blk@set{shape/.is choice}

\def\blkio@blk@set@positioning#1#2{
	\def\blkio@blk@positioning{#1=#2}
}
\blkio@blk@set{above/.code=\blkio@blk@set@positioning{above}{#1}}%
\blkio@blk@set{below/.code=\blkio@blk@set@positioning{below}{#1}}%
\blkio@blk@set{left/.code=\blkio@blk@set@positioning{left}{#1}}%
\blkio@blk@set{right/.code=\blkio@blk@set@positioning{right}{#1}}%
\blkio@blk@set{above left/.code=\blkio@blk@set@positioning{above left}{#1}}%
\blkio@blk@set{above right/.code=\blkio@blk@set@positioning{above right}{#1}}%
\blkio@blk@set{below left/.code=\blkio@blk@set@positioning{below left}{#1}}%
\blkio@blk@set{below right/.code=\blkio@blk@set@positioning{below right}{#1}}%
% default, nothing
\def\blkio@blk@positioning{}


%
% ===================================== Block Macro
%

%
% #1 - name / shape name (rectangle, ellipse, diamond)
% #2 - scale shape
% #3 - shape ratio
% #4 - shape io link
%
\def\blkio@blk@shape@std@define#1#2#3#4{
	\blkio@blk@set{shape/#1/.code={
			\def\blkio@blk@size@scale@shape{#2}
			\def\blkio@blk@size@shape@ratio{#3}
			\def\blkio@blk@shape@place{\csname blkio@blk@shape@#1@place\endcsname}
			\def\blkio@blk@shape@io{#4}
		}
	}
	
	\expandafter\def\csname blkio@blk@shape@#1@place\endcsname{
		\blkio@debug{Placing Block shape `#1` for `\blkio@blk@name` with `\blkio@shape@style`}
		\node[every block shape,rounded corners,
			blkio@style/.expand once=\blkio@shape@style,
			at=(\blkio@blk@name.center),
			minimum width=\blkio@blk@width,
			minimum height=\blkio@blk@height,
			#1
			] (\blkio@blk@name-shape) {};
	
	}
}

\def\blkio@blk@shape@std@size{
	% no size change keep current \blkio@blk@width \blkio@blk@height
}

\def\blkio@blk@shape@scale@ellipse{
	\blkio@blk@width=1.4142136\blkio@blk@width
	\blkio@blk@height=1.4142136\blkio@blk@height
}

\def\blkio@blk@shape@io@ellipse{

	% TODO - Fixme, use ellipse tangent if possible, for now point on ellipse from center

	\def\blkio@blk@shape@io@path{(\blkio@blk@name) -- (\blkio@io@place@x,\blkio@io@place@y) 
									-- (\blkio@io@place@shift@x,\blkio@io@place@shift@y)}
}

\def\blkio@blk@shape@scale@diamond{
	\multiply\blkio@blk@width by 2
	\multiply\blkio@blk@height by 2
}
\def\blkio@blk@shape@io@diamond{
	\pgfextractx{\pgf@xa}{\pgfpointanchor{\blkio@blk@name-shape}{center}}
	\pgfextracty{\pgf@ya}{\pgfpointanchor{\blkio@blk@name-shape}{center}}
	
	\pgfmathparse{Mod(atan2(\blkio@io@place@y-\pgf@ya,\blkio@io@place@x-\pgf@xa),360)}
	\let\@pt@angle=\pgfmathresult
	
	\ifdim\@pt@angle pt<180 pt
		\def\@corner@a{north}
	\else
		\def\@corner@a{south}
	\fi
	
	\pgfmathparse{abs(\@pt@angle-180)}
	\ifdim\pgfmathresult pt<90 pt
		\def\@corner@b{west}
	\else
		\def\@corner@b{east}
	\fi
	
	\def\blkio@blk@shape@io@path{($(\blkio@blk@name-shape.\@corner@a)!(\blkio@io@place@x,\blkio@io@place@y)!(\blkio@blk@name-shape.\@corner@b)$) 
				-- (\blkio@io@place@x,\blkio@io@place@y) -- (\blkio@io@place@shift@x,\blkio@io@place@shift@y)}
}

\def\blkio@blk@shape@circle@ratio{
	\pgfmathdivide@{\blkio@blk@width}{\blkio@blk@height}
	\let\@block@ratio\pgfmathresult
	
	\ifdim\@block@ratio pt < 1 pt
		\pgfmathsetlength{\global\blkio@blk@width}{\blkio@blk@height}
	\else
		\pgfmathsetlength{\global\blkio@blk@height}{\blkio@blk@width}
	\fi
}

\blkio@blk@shape@std@define{rectangle}{\blkio@blk@shape@std@size}{}{}
\blkio@blk@shape@std@define{circle}{\blkio@blk@shape@scale@ellipse}{\blkio@blk@shape@circle@ratio}{\blkio@blk@shape@io@ellipse}
\blkio@blk@shape@std@define{ellipse}{\blkio@blk@shape@scale@ellipse}{}{\blkio@blk@shape@io@ellipse}
\blkio@blk@shape@std@define{diamond}{\blkio@blk@shape@scale@diamond}{}{\blkio@blk@shape@io@diamond}

\blkio@blk@set{shape=rectangle}


%
% ################### Regular Polygon
%

%
% #1 - name
% #2 - radius factor
% #3 - width factor
% #4 - height factor
% #5 - shape sides
% #6 - shape angle
% #7 - shape anchor
% #8 - sector angle
%
\def\blkio@blk@shape@rp@define#1#2#3#4#5#6#7#8{
	\blkio@blk@set{shape/RP#5#1/.code={
			\def\blkio@blk@size@scale@shape{\blkio@blk@size@scale@shape@rp{#3}{#4}}
			\def\blkio@blk@size@shape@ratio{\blkio@blk@size@shape@ratio@rp{#3}{#4}}
			\def\blkio@blk@shape@place{\blkio@blk@shape@place@rp{#5}{#6}{#7}{#2}{#3}}
			\def\blkio@blk@shape@io{\blkio@blk@shape@io@rp{#5}{#8}}
		}
	}
}

%
% #1 - width factor
% #2 - height factor
%
\def\blkio@blk@size@scale@shape@rp#1#2{
	% compute RP inner radius
	\pgfmathdivide@{\blkio@blk@height}{\blkio@blk@width}
	\pgfmathatan@{\pgfmathresult}
	\pgfmathsec@{\pgfmathresult}
	\pgfmathmultiply@{\blkio@blk@width}{\pgfmathresult}
	\pgfmathdivide@{\pgfmathresult}{2}
	\let\@rp@radius\pgfmathresult
	
	\pgfmathmultiply@{\@rp@radius}{#1}
	\blkio@blk@set@min@width{\pgfmathresult}
	\pgfmathmultiply@{\@rp@radius}{#2}
	\blkio@blk@set@min@height{\pgfmathresult}
}

%
% #1 - width factor
% #2 - height factor
%
\def\blkio@blk@size@shape@ratio@rp#1#2{
	\pgfmathdivide@{#1}{#2}
	\let\@rp@ratio\pgfmathresult
	
	\pgfmathdivide@{\blkio@blk@width}{\blkio@blk@height}
	\let\@block@ratio\pgfmathresult
	
	\ifdim\@block@ratio pt < \@rp@ratio pt
		\pgfmathsetlength{\global\blkio@blk@width}{\@rp@ratio*\blkio@blk@height}
	\else
		\pgfmathsetlength{\global\blkio@blk@height}{\blkio@blk@width/\@rp@ratio}
	\fi
}


%
% #1 - shape sides
% #2 - shape angle
% #3 - shape anchor
% #4 - radius factor
% #5 - width factor
%
\def\blkio@blk@shape@place@rp#1#2#3#4#5{
	\pgfmathsetlengthmacro\@rp@diam{2*#4*\blkio@blk@width/#5}

	\node[every block shape,
		blkio@style/.expand once=\blkio@shape@style,
		minimum size=\@rp@diam,
		regular polygon,regular polygon sides=#1,
		shape border rotate=#2,
		anchor=#3
		] at ( \blkio@blk@name.block #3) (\blkio@blk@name-shape) {};
}

\def\blkio@blk@shape@io@rp#1#2{
	\pgfextractx{\pgf@xa}{\pgfpointanchor{\blkio@blk@name-shape}{center}}
	\pgfextracty{\pgf@ya}{\pgfpointanchor{\blkio@blk@name-shape}{center}}
	
	\pgfmathparse{Mod(atan2(\blkio@io@place@y-\pgf@ya,\blkio@io@place@x-\pgf@xa),360)}
	\let\@pt@angle@abs=\pgfmathresult
	\pgfmathparse{Mod(\@pt@angle@abs+#2,360)}
	\let\@pt@angle=\pgfmathresult
	
	\pgfmathdivide@{360}{#1}
	\let\@pr@angle=\pgfmathresult
	\pgfmathdivide@{\@pt@angle}{\@pr@angle}
	\pgfmathfloor{\pgfmathresult}
	\pgfmathadd@{\pgfmathresult}{1}
	\pgfmathint{\pgfmathresult}
	\let\@corner@a=\pgfmathresult
	\pgfmathparse{max(Mod(\@corner@a+1,#1+1),1)}
	\pgfmathint{\pgfmathresult}
	\let\@corner@b=\pgfmathresult
	
	\def\blkio@blk@shape@io@path{($(\blkio@blk@name-shape.corner \@corner@a)!(\blkio@io@place@x,\blkio@io@place@y)!(\blkio@blk@name-shape.corner \@corner@b)$) 
				-- (\the\blkio@io@place@x,\the\blkio@io@place@y) -- (\blkio@io@place@shift@x,\blkio@io@place@shift@y)}
}


%
% #1 - RP sides
% #2 - RP Name
%
\def\blk@shape@rp@radius@factor@set#1#2{
	% Radius
	\pgfmathdivide@{180}{#1}%
	\pgfmathsec@{\pgfmathresult}%
	\expandafter\let\csname blk@shape@rp@#2@radius@f\endcsname=\pgfmathresult
}

% compute factor for regular polygon trigone or Pentagone
%
% #1 - RP Sides
% #2 - RP Name
%
\def\blk@shape@rp@tri@penta@factors@set#1#2{
	% RP tip
	\pgfmathparse{1+\csname blk@shape@rp@#2@radius@f\endcsname}
	\expandafter\let\csname blk@shape@rp@#2@tip@f\endcsname=\pgfmathresult
	% RP base
	\pgfmathdivide@{360}{#1}%
	\pgfmathsin@{\pgfmathresult}%
	\pgfmathmultiply@{\csname blk@shape@rp@#2@radius@f\endcsname}{\pgfmathresult}
	\pgfmathmultiply@{2}{\pgfmathresult}
	\expandafter\let\csname blk@shape@rp@#2@base@f\endcsname=\pgfmathresult
}

% compute factor for regular polygon hexagone
%
\def\blk@shape@rp@hexa@factors@set{
	% RP tip
	\pgfmathparse{2*\blk@shape@rp@hexa@radius@f}
	\let\blk@shape@rp@hexa@tip@f=\pgfmathresult
	% RP base
	\pgfmathmultiply@{2}{1}
	\let\blk@shape@rp@hexa@base@f=\pgfmathresult
}

% compute factor for regular polygon octagone
%
\def\blk@shape@rp@octa@factors@set{
	% RP tip
	\pgfmathmultiply@{2}{1}
	\let\blk@shape@rp@octa@tip@f=\pgfmathresult
	% RP base
	\let\blk@shape@rp@octa@base@f=\pgfmathresult
}

%
% ################### Regular Polygon End
%

% RP Radius Factors
\blk@shape@rp@radius@factor@set{3}{tri}
\blk@shape@rp@radius@factor@set{5}{penta}
\blk@shape@rp@radius@factor@set{6}{hexa}
\blk@shape@rp@radius@factor@set{8}{octa}
% RP tip/base Factors
\blk@shape@rp@tri@penta@factors@set{3}{tri}
\blk@shape@rp@tri@penta@factors@set{5}{penta}
\blk@shape@rp@hexa@factors@set
\blk@shape@rp@octa@factors@set

\blkio@blk@shape@rp@define{N}{\blk@shape@rp@tri@radius@f}{\blk@shape@rp@tri@base@f}{\blk@shape@rp@tri@tip@f}{3}{0}{north}{-90}
\blkio@blk@shape@rp@define{E}{\blk@shape@rp@tri@radius@f}{\blk@shape@rp@tri@tip@f}{\blk@shape@rp@tri@base@f}{3}{-90}{east}{0}
\blkio@blk@shape@rp@define{W}{\blk@shape@rp@tri@radius@f}{\blk@shape@rp@tri@tip@f}{\blk@shape@rp@tri@base@f}{3}{90}{west}{-180}
\blkio@blk@shape@rp@define{S}{\blk@shape@rp@tri@radius@f}{\blk@shape@rp@tri@base@f}{\blk@shape@rp@tri@tip@f}{3}{180}{south}{90}

\blkio@blk@shape@rp@define{N}{\blk@shape@rp@penta@radius@f}{\blk@shape@rp@penta@base@f}{\blk@shape@rp@penta@tip@f}{5}{0}{north}{-90}
\blkio@blk@shape@rp@define{E}{\blk@shape@rp@penta@radius@f}{\blk@shape@rp@penta@tip@f}{\blk@shape@rp@penta@base@f}{5}{-90}{east}{0}
\blkio@blk@shape@rp@define{W}{\blk@shape@rp@penta@radius@f}{\blk@shape@rp@penta@tip@f}{\blk@shape@rp@penta@base@f}{5}{90}{west}{-180}
\blkio@blk@shape@rp@define{S}{\blk@shape@rp@penta@radius@f}{\blk@shape@rp@penta@base@f}{\blk@shape@rp@penta@tip@f}{5}{180}{south}{90}

\blkio@blk@shape@rp@define{H}{\blk@shape@rp@hexa@radius@f}{\blk@shape@rp@hexa@tip@f}{\blk@shape@rp@hexa@base@f}{6}{0}{east}{-60}
\blkio@blk@shape@rp@define{V}{\blk@shape@rp@hexa@radius@f}{\blk@shape@rp@hexa@base@f}{\blk@shape@rp@hexa@tip@f}{6}{30}{north}{-90}

\blkio@blk@shape@rp@define{}{\blk@shape@rp@octa@radius@f}{\blk@shape@rp@octa@base@f}{\blk@shape@rp@octa@tip@f}{8}{0}{north}{-67.5}


\def\blkio@blk@init{
	\def\blkio@blk@at{\pgfqpoint{0pt}{0pt}}
	
	\blkio@blk@north@init
	\blkio@blk@east@init
	\blkio@blk@west@init
	\blkio@blk@south@init
}

\def\blkio@blk@node@save{
	\def\@blk@prefix{blkio@blk@text}
	
	\global\expandafter\edef\csname\@blk@prefix @node@name\endcsname{\pgfpositionnodelatername}
	\global\expandafter\edef\csname\@blk@prefix @node@minx\endcsname{\pgfpositionnodelaterminx}
	\global\expandafter\edef\csname\@blk@prefix @node@miny\endcsname{\pgfpositionnodelaterminy}
	\global\expandafter\edef\csname\@blk@prefix @node@maxx\endcsname{\pgfpositionnodelatermaxx}
	\global\expandafter\edef\csname\@blk@prefix @node@maxy\endcsname{\pgfpositionnodelatermaxy}
	\expandafter\newbox\csname\@blk@prefix @node@box\endcsname
	\global\setbox\csname\@blk@prefix @node@box\endcsname=\box\pgfpositionnodelaterbox
	
	% calc block text size
	\blkio@node@calc@dim{\@blk@prefix}
	% affect block size
	\ifdim\blkio@blk@width<\blkio@node@dim@x\relax
		\pgfmathsetlength{\global\blkio@blk@width}{\blkio@node@dim@x}
	\fi
	\ifdim\blkio@blk@height<\blkio@node@dim@y\relax
		\pgfmathsetlength{\global\blkio@blk@height}{\blkio@node@dim@y}
	\fi
	
	\blkio@debug{Block Text Size `\the\blkio@blk@width` `\the\blkio@blk@height`}
}

\def\blkio@blk@side@define#1#2#3#4#5{
	\expandafter\newcount\csname blkio@blk@#1@count\endcsname	
	\expandafter\newlength\csname blkio@blk@#1@depth\endcsname
	\expandafter\newlength\csname blkio@blk@#1@depth@min\endcsname
	% side group span
	\expandafter\newlength\csname blkio@blk@#1@#3@span\endcsname
	\expandafter\newlength\csname blkio@blk@#1@#4@span\endcsname
	\expandafter\newlength\csname blkio@blk@#1@#5@span\endcsname
	
	\expandafter\def\csname blkio@blk@#1@init\endcsname{
		% Reset blk size
		\pgfmathsetlength{\csname blkio@blk@#2\endcsname}{0}
		% Reset blk side length
		\pgfmathsetlength{\csname blkio@blk@#1@depth\endcsname}{0}
		\pgfmathsetlength{\csname blkio@blk@#1@depth@min\endcsname}{3pt}
		% Reset blk side group length
		\pgfmathsetlength{\csname blkio@blk@#1@#3@depth\endcsname}{0}
		\pgfmathsetlength{\csname blkio@blk@#1@#4@depth\endcsname}{0}
		\pgfmathsetlength{\csname blkio@blk@#1@#5@depth\endcsname}{0}
	}
	
	% update span value and depth value before placement
	\expandafter\def\csname blkio@blk@#1@side@calc\endcsname{

		% #3, corner group
		\pgfmathsetlength{\csname blkio@blk@#1@#3@span\endcsname}
			{\csname blkio@io@#1@#3@growth\endcsname + \csname blkio@io@#1@#3@count\endcsname * \blkio@io@space }

		% #4 span of the middle
		\pgfmathsetlength{\csname blkio@blk@#1@#4@span\endcsname}
			{\csname blkio@io@#1@#4@growth\endcsname + \csname blkio@io@#1@#4@count\endcsname * \blkio@io@space }
		
		% #5, corner group
		\pgfmathsetlength{\csname blkio@blk@#1@#5@span\endcsname}
			{\csname blkio@io@#1@#5@growth\endcsname + \csname blkio@io@#1@#5@count\endcsname * \blkio@io@space }
		
		% Corners
		\def\@span@A{\csname blkio@blk@#1@#3@span\endcsname}
		\def\@span@B{\csname blkio@blk@#1@#5@span\endcsname}
		% Middle
		\def\@span@C{\csname blkio@blk@#1@#4@span\endcsname}
			
		% #3, corner group
		\pgfmathsetlengthmacro{\@span}{ 2 * ( \@span@A ) + \@span@C }

		\pgfmathsetlength{\csname blkio@blk@#2\endcsname}{max(\csname blkio@blk@#2\endcsname , \@span)}

		% #5, corner group
		\pgfmathsetlengthmacro{\@span}{ 2 * ( \@span@B ) + \@span@C }

		\pgfmathsetlength{\csname blkio@blk@#2\endcsname}{max(\csname blkio@blk@#2\endcsname , \@span)}

		\blkio@debug{#1 #2 = \the\csname blkio@blk@#2\endcsname}
		
		% TODO Update span if spread is enabled
		
		% Updating depth
		
		\csname blkio@blk@#1@count\endcsname=0\relax
		\expandafter\advance\csname blkio@blk@#1@count\endcsname by \csname blkio@io@#1@#3@count\endcsname\relax
		\expandafter\advance\csname blkio@blk@#1@count\endcsname by \csname blkio@io@#1@#4@count\endcsname\relax
		\expandafter\advance\csname blkio@blk@#1@count\endcsname by \csname blkio@io@#1@#5@count\endcsname\relax
		
		\ifnum\csname blkio@blk@#1@count\endcsname>0
			\pgfmathsetlength{\csname blkio@blk@#1@depth\endcsname}
				{\csname blkio@blk@#1@depth\endcsname + \blkio@blk@in@sep + \blkio@blk@out@sep }
		\fi
		
		\pgfmathsetlength{\csname blkio@blk@#1@depth\endcsname}
			{max(\csname blkio@blk@#1@depth\endcsname , \csname blkio@blk@#1@depth@min\endcsname)}

		\blkio@debug{#1 count \the\csname blkio@blk@#1@count\endcsname}
		\blkio@debug{#1 depth = \the\csname blkio@blk@#1@depth\endcsname}
	}
}

\blkio@blk@side@define{north}{width}{left}{center}{right}
\blkio@blk@side@define{east}{height}{up}{center}{down}
\blkio@blk@side@define{west}{height}{up}{center}{down}
\blkio@blk@side@define{south}{width}{left}{center}{right}

%
% ===================================== Block Environment
%

\newif\ifblkioenv

\newenvironment{blockio}[2][]{
	\blkio@debug{--- blkio '#1' '#2'}

	\global\advance\blkio@blk@count by 1\relax

	% Reset BLKIO values
	\blkio@blk@init
	\blkio@io@north@left@init
	\blkio@io@north@center@init
	\blkio@io@north@right@init
	\blkio@io@east@up@init
	\blkio@io@east@center@init
	\blkio@io@east@down@init
	\blkio@io@west@up@init
	\blkio@io@west@center@init
	\blkio@io@west@down@init
	\blkio@io@south@left@init
	\blkio@io@south@center@init
	\blkio@io@south@right@init
	
	\let\blkio@blk@text@style=\empty
	
	\blkio@blk@set{#1}
		
	\@ifundefined{blkio@blk@name}{
		\blkio@name@check{#2}{blk\the\blkio@blk@count}
		\edef\blkio@blk@name{\blkio@name@def}
	}{}
	
	{
		\pgfpositionnodelater{\blkio@blk@node@save}
		\node[every block text,
				anchor=\blk@blk@text@anchor,
				blkio@style/.expand once=\blkio@blk@text@style]
				(\blkio@blk@name-text) {#2};
	}
	\blkioenvtrue
}{
	\blkio@debug{--- endblkio}
	
	% Scale block size based on shape
	\blkio@blk@size@scale@shape
	
	% block size increase base on iopins
	\blkio@blk@north@side@calc
	\blkio@blk@east@side@calc
	\blkio@blk@west@side@calc
	\blkio@blk@south@side@calc
	
	% Add inner spacing
	\pgfmathsetlength{\blkio@blk@width}{\blkio@blk@width+2*\blkio@blk@inner@sep}
	\pgfmathsetlength{\blkio@blk@height}{\blkio@blk@height+2*\blkio@blk@inner@sep}
	
	% block size update to shape ratio, may do nothing
	\blkio@blk@size@shape@ratio
	
	\pgfextractx{\pgf@xc}{\blkio@blk@at}
	\pgfextracty{\pgf@yc}{\blkio@blk@at}
	
	\def\blkioname{\blkio@blk@name}

	\node[	every block,
			anchor=\blk@blk@anchor,
			at={(\pgf@xc,\pgf@yc)},
			blkio@style/.expand once=\blkio@blk@positioning,
			blkio@style/.expand once=\blkio@blk@style,
			ioblock]
		 (\blkioname) {};
	
	\blkio@blk@shape@place
	
	\pgfextractx{\blkio@io@place@x}{\pgfpointanchor{\blkio@blk@name-shape}{\blk@blk@text@anchor}}
	\pgfextracty{\blkio@io@place@y}{\pgfpointanchor{\blkio@blk@name-shape}{\blk@blk@text@anchor}}
	\blkio@node@place{blkio@blk@text}{\blkio@io@place@x}{\blkio@io@place@y}
	
	\blkio@io@north@left@place
	\blkio@io@north@center@place
	\blkio@io@north@right@place
	\blkio@io@east@up@place
	\blkio@io@east@center@place
	\blkio@io@east@down@place
	\blkio@io@west@up@place
	\blkio@io@west@center@place
	\blkio@io@west@down@place
	\blkio@io@south@left@place
	\blkio@io@south@center@place
	\blkio@io@south@right@place
	
	\blkioenvfalse
}

%
% ===================================== IO Pin CS
%

\newlength\blkio@io@place@x
\newlength\blkio@io@place@y

\let\blkio@iopin@name=\@undefined

%
% ===================================== IO Pin Keyes
%

\blkio@io@set{.unknown/.code={
	\blkio@PackageWarning{Unknown block key `\pgfkeyscurrentkeyRAW` with value `#1` }
	}
}

\blkio@io@set{.search also={/blkio}}

\blkio@io@set{at/.code={
		\tikz@scan@one@point\iopin@set@at#1
	}
}
\def\iopin@set@at#1{
	\pgfextractx{\blkio@io@place@x}{#1}
	\pgfextracty{\blkio@io@place@y}{#1}
}

\blkio@io@set{gshift/.code={\def\iopin@growth@shift{#1}}}
\def\iopin@growth@shift{0pt}

\blkio@io@set{growth/.is choice}
\blkio@io@set{growth/start/.code={
		\def\iopin@growth@init##1##2{
			%Does nothing, keep same \blkio@io@place@x,\blkio@io@place@y values
		}
	}
}
\blkio@io@set{growth/io/.code={
		\def\iopin@growth@init##1##2{
			% adjusting location per node dimention
			\pgfmathsetlengthmacro\tmp{-##1-\blkio@io@space/2}
			\csname blkio@io@##2@center@coord@growth\endcsname{\tmp}
		}
	}
}
\blkio@io@set{growth/end/.code={
		\def\iopin@growth@init##1##2{
			% adjusting location per node dimention
			\pgfmathsetlengthmacro\tmp{-##1-\blkio@io@space}
			\csname blkio@io@##2@center@coord@growth\endcsname{\tmp}
		}
	}
}

\blkio@io@set{growth=io}

\blkio@io@set{name/.code={\def\blkio@iopin@name{#1}}}

\newif\ifblkio@io@dir@input
\newif\ifblkio@io@orientation@horz
\blkio@io@set{in/.code={\blkio@io@dir@inputtrue}}
\blkio@io@set{out/.code={\blkio@io@dir@inputfalse}}

\blkio@io@set{north/.forward to=/blkio/io/north center}
\blkio@io@set{east/.forward to=/blkio/io/east center}
\blkio@io@set{west/.forward to=/blkio/io/west center}
\blkio@io@set{south/.forward to=/blkio/io/south center}

\blkio@io@set{text style/.code=\def\blkio@io@text@style{#1}}
\def\blkio@io@text@style{}

\blkio@io@set{style/.code=\def\blkio@io@pin@style{#1}}
\def\blkio@io@pin@style{}

\blkio@io@set{link style/.code=\def\blkio@io@link@style{#1}}
\def\blkio@io@link@style{}

%
% ===================================== IO Pin Macro
%

%
% #1 side
% #2 orientation
%
\def\blkio@io@orientation@define#1#2{
	\expandafter\let\csname blkio@io@#1@orientation\endcsname=#2
}

\blkio@io@orientation@define{north}{\blkio@io@orientation@horzfalse}
\blkio@io@orientation@define{south}{\blkio@io@orientation@horzfalse}
\blkio@io@orientation@define{east}{\blkio@io@orientation@horztrue}
\blkio@io@orientation@define{west}{\blkio@io@orientation@horztrue}

%
% #1 side
% #2 group
% #3 growth from node dim
% #4 depth from node dim
%
\def\blkio@io@define#1#2#3#4{

	\expandafter\newcount\csname blkio@io@#1@#2@count\endcsname
	\expandafter\newlength\csname blkio@io@#1@#2@growth\endcsname
	
	% Side Group Key
	\blkio@io@set{#1 #2/.code={
		\ifblkioenv
			\csname blkio@io@#1@orientation\endcsname
			\def\blkio@create@iopin{\csname blkio@io@#1@#2@add\endcsname}
		\else
			\blkio@PackageError{Placement `#1 #2` requires a block}
		\fi
		}
	}
	% Add Side Group init
	\expandafter\def\csname blkio@io@#1@#2@init\endcsname{
		\csname blkio@io@#1@#2@count\endcsname=0\relax
		\pgfmathsetlength{\csname blkio@io@#1@#2@growth\endcsname}{0}
	}	
	
	% Side Group Node Save
	\expandafter\def\csname blkio@io@#1@#2@node@save\endcsname{
		\blkio@debug{Node #1 #2 (\number\csname blkio@io@#1@#2@count\endcsname) save  '\pgfpositionnodelatername'}
		
		\global\expandafter\edef\csname\@io@pin@prefix @node@name\endcsname{\pgfpositionnodelatername}
		\global\expandafter\edef\csname\@io@pin@prefix @node@minx\endcsname{\pgfpositionnodelaterminx}
		\global\expandafter\edef\csname\@io@pin@prefix @node@miny\endcsname{\pgfpositionnodelaterminy}
		\global\expandafter\edef\csname\@io@pin@prefix @node@maxx\endcsname{\pgfpositionnodelatermaxx}
		\global\expandafter\edef\csname\@io@pin@prefix @node@maxy\endcsname{\pgfpositionnodelatermaxy}
		\expandafter\newbox\csname\@io@pin@prefix @node@box\endcsname
		\global\setbox\csname\@io@pin@prefix @node@box\endcsname=\box\pgfpositionnodelaterbox
		
		% calc node size
		\blkio@node@calc@dim{\@io@pin@prefix}
		% affect node size
		\pgfmathsetlength{\global\csname blkio@io@#1@#2@growth\endcsname}{\csname blkio@io@#1@#2@growth\endcsname + #3}
		\ifdim\csname blkio@blk@#1@depth\endcsname<#4\relax
			\pgfmathsetlength{\global\csname blkio@blk@#1@depth\endcsname}{#4}
		\fi
		
		\blkio@debug{Growth #1 #2 = \expandafter\the\csname blkio@io@#1@#2@growth\endcsname}
		\blkio@debug{Depth #1 = \expandafter\the\csname blkio@blk@#1@depth\endcsname}
	}
	
	% Add IO Pin
	\expandafter\def\csname blkio@io@#1@#2@add\endcsname##1{
		\blkio@debug{Add #1 #2 IO Pin '##1'}
		
		\expandafter\advance\csname blkio@io@#1@#2@count\endcsname by 1\relax
		
		\@ifundefined{blkio@iopin@name}{
			\blkio@name@check{##1}{\blkio@blk@name-#1#2\the\csname blkio@io@#1@#2@count\endcsname}
		}{
			\let\blkio@name@def=\blkio@iopin@name
		}
		\let\blkio@iopin@name=\blkio@name@def
		
		\def\@io@pin@prefix{blkio@io@#1@#2@io-\number\csname blkio@io@#1@#2@count\endcsname}	
		\expandafter\edef\csname\@io@pin@prefix @name\endcsname{\blkio@name@def}
		\expandafter\let\csname\@io@pin@prefix @style\endcsname=\blkio@io@pin@style
		\expandafter\let\csname\@io@pin@prefix @link@style\endcsname=\blkio@io@link@style
		
		\ifblkio@io@dir@input
			\expandafter\def\csname\@io@pin@prefix @dir\endcsname{\blkio@io@dir@inputtrue}
			\edef\@io@text@param{\blkio@get@param{#1}{text}{in}}
			\edef\@io@pin@param{\blkio@get@param{#1}{pin}{in}}
		\else
			\expandafter\def\csname\@io@pin@prefix @dir\endcsname{\blkio@io@dir@inputfalse}
			\edef\@io@text@param{\blkio@get@param{#1}{text}{out}}
			\edef\@io@pin@param{\blkio@get@param{#1}{pin}{out}}
		\fi
		
		\blkio@param@value{text}\@io@text@param
		
		{
			\def\blkio@pos@node@later{\csname blkio@io@#1@#2@node@save\endcsname}
			\pgfpositionnodelater{\blkio@pos@node@later}
			
			\node[every iopin text,
					rotate=\blkiotextrotate,
					anchor=\blkiotextanchor,
					blkio@style/.expand once=\blkio@io@text@style] 
					(\blkio@name@def-text) {##1};
		}
	}
	
	% Placement
	\expandafter\def\csname blkio@io@#1@#2@place\endcsname{
		\blkio@debug{Placing #1 #2 IO Pins (\the\csname blkio@io@#1@#2@count\endcsname)}
		\ifnum\csname blkio@io@#1@#2@count\endcsname>0
			\csname blkio@io@#1@#2@coord@start\endcsname		
			
			% placing nodes
			\foreach \i in {1,...,\number\csname blkio@io@#1@#2@count\endcsname}
			{
					\edef\@io@pin@prefix{blkio@io@#1@#2@io-\i}
					\edef\@io@pin@name{\csname\@io@pin@prefix @name\endcsname}
					\expandafter\let\expandafter\@io@pin@style\csname\@io@pin@prefix @style\endcsname
					\expandafter\let\expandafter\@io@link@style\csname\@io@pin@prefix @link@style\endcsname
					
					\csname\@io@pin@prefix @dir\endcsname
					
					\ifblkio@io@dir@input
						\edef\@io@text@param{\blkio@get@param{#1}{text}{in}}
						\edef\@io@pin@param{\blkio@get@param{#1}{pin}{in}}
						\blkio@keydef{symbol distance}{\blkio@blk@in@sep}
						\edef\@io@text@depth@shift{ (\csname blkio@blk@#1@depth\endcsname + \blkio@blk@outer@sep - \blkio@blk@in@sep) }
						\def\@io@pin@anchor{out}
					\else
						\edef\@io@text@param{\blkio@get@param{#1}{text}{out}}
						\edef\@io@pin@param{\blkio@get@param{#1}{pin}{out}}
						\blkio@keydef{symbol distance}{\blkio@blk@out@sep}
						\edef\@io@text@depth@shift{ \blkio@blk@out@sep + \blkio@blk@outer@sep }
						\def\@io@pin@anchor{in}
					\fi
					
					\blkio@param@value{text}\@io@text@param
					\blkio@param@value{pin}\@io@pin@param
					\def\blkiopinname{\@io@pin@name}
					\blkio@debug{Placing \i\space '\@io@pin@name' @( \the\blkio@io@place@x , \the\blkio@io@place@y )}
					% Get IO Text Dimension
					\blkio@node@calc@dim{\@io@pin@prefix}
					% IO Text
					\csname blkio@io@#1@depth@shift\endcsname{\@io@text@depth@shift}
					\blkio@node@place{\@io@pin@prefix}{\blkio@io@place@shift@x}{\blkio@io@place@shift@y}
					% growth by the node size
					\csname blkio@io@#1@#2@coord@growth\endcsname{#3}
					
					% growth by half the io pin space
					\csname blkio@io@#1@#2@coord@growth\endcsname{\blkio@io@space/2}
					\csname blkio@io@#1@depth@shift\endcsname{\blkio@blk@outer@sep}
					
					\def\blkio@blk@shape@io@path{(\blkio@io@place@x,\blkio@io@place@y) -- (\blkio@io@place@shift@x,\blkio@io@place@shift@y)}
					\blkio@blk@shape@io
					
					% IO Link
					\draw[every link,blkio@style/.expand once=\@io@link@style] 
							\blkio@blk@shape@io@path ;
							
					% IO Pin
					\draw	node[every iopin,
									rotate=\blkiopinrotate,
									anchor=\@io@pin@anchor,
									blkio@style/.expand once=\@io@pin@style,
									minimum width=\csname blkio@blk@#1@depth\endcsname,
									minimum height=\blkio@io@space]
									at (\blkio@io@place@shift@x,\blkio@io@place@shift@y)
									(\blkiopinname) {};
					
					% growth by half the io pin space
					\csname blkio@io@#1@#2@coord@growth\endcsname{\blkio@io@space/2}
			}
		\fi
	}
}

\blkio@io@define{north}{left}{\blkio@node@dim@x}{\blkio@node@dim@y}
\blkio@io@define{north}{center}{\blkio@node@dim@x}{\blkio@node@dim@y}
\blkio@io@define{north}{right}{\blkio@node@dim@x}{\blkio@node@dim@y}

\blkio@io@define{east}{up}{\blkio@node@dim@y}{\blkio@node@dim@x}
\blkio@io@define{east}{center}{\blkio@node@dim@y}{\blkio@node@dim@x}
\blkio@io@define{east}{down}{\blkio@node@dim@y}{\blkio@node@dim@x}

\blkio@io@define{west}{up}{\blkio@node@dim@y}{\blkio@node@dim@x}
\blkio@io@define{west}{center}{\blkio@node@dim@y}{\blkio@node@dim@x}
\blkio@io@define{west}{down}{\blkio@node@dim@y}{\blkio@node@dim@x}

\blkio@io@define{south}{left}{\blkio@node@dim@x}{\blkio@node@dim@y}
\blkio@io@define{south}{center}{\blkio@node@dim@x}{\blkio@node@dim@y}
\blkio@io@define{south}{right}{\blkio@node@dim@x}{\blkio@node@dim@y}



% 1 - side name
% 2 - group name
% 3 - group side
% 4 - start offset
% 5 - gowth direction (x or y)
% 6 - depth direction (+ or -)
\def\blkio@io@growth@define#1#2#3#4#5#6{

	\expandafter\def\csname blkio@io@#1@#2@coord@start\endcsname{
		\pgfextractx{\blkio@io@place@x}{\pgfpointanchor{\blkio@blk@name}{block #3}}
		\pgfextracty{\blkio@io@place@y}{\pgfpointanchor{\blkio@blk@name}{block #3}}

		\pgfmathsetlength{\global\csname blkio@io@place@#5\endcsname}{\csname blkio@io@place@#5\endcsname #4}
	}
	% growth by node span
	\expandafter\def\csname blkio@io@#1@#2@coord@growth\endcsname##1{
		\pgfmathsetlength{\global\csname blkio@io@place@#5\endcsname}{\csname blkio@io@place@#5\endcsname #6 ##1}
	}
}

\blkio@io@growth@define{north}{left}{north west}{+\blkio@blk@inner@sep}{x}{+}
\blkio@io@growth@define{north}{center}{north}{-0.5*\blkio@blk@north@center@span}{x}{+}
\blkio@io@growth@define{north}{right}{north east}{-\blkio@blk@inner@sep-\blkio@blk@north@right@span}{x}{+}

\blkio@io@growth@define{south}{left}{south west}{+\blkio@blk@inner@sep}{x}{+}
\blkio@io@growth@define{south}{center}{south}{-0.5*\blkio@blk@south@center@span}{x}{+}
\blkio@io@growth@define{south}{right}{south east}{-\blkio@blk@inner@sep-\blkio@blk@south@right@span}{x}{+}

\blkio@io@growth@define{east}{up}{north east}{-\blkio@blk@inner@sep}{y}{-}
\blkio@io@growth@define{east}{center}{east}{+0.5*\blkio@blk@east@center@span}{y}{-}
\blkio@io@growth@define{east}{down}{south east}{+\blkio@blk@inner@sep+\blkio@blk@east@down@span}{y}{-}

\blkio@io@growth@define{west}{up}{north west}{-\blkio@blk@inner@sep}{y}{-}
\blkio@io@growth@define{west}{center}{west}{+0.5*\blkio@blk@west@center@span}{y}{-}
\blkio@io@growth@define{west}{down}{south west}{+\blkio@blk@inner@sep+\blkio@blk@west@down@span}{y}{-}

\def\blkio@io@depth@shift@define#1#2#3{
	\expandafter\def\csname blkio@io@#1@depth@shift\endcsname##1{
		\def\@shift@var{##1}
		\pgfmathsetlengthmacro{\blkio@io@place@shift@x}{\blkio@io@place@x #2}
		\pgfmathsetlengthmacro{\blkio@io@place@shift@y}{\blkio@io@place@y #3}
	}
}

\blkio@io@depth@shift@define{north}{}{+\@shift@var}
\blkio@io@depth@shift@define{south}{}{-\@shift@var}
\blkio@io@depth@shift@define{east}{+\@shift@var}{}
\blkio@io@depth@shift@define{west}{-\@shift@var}{}

% in / out param

% side - TEXT - in r/a - out r/a - PIN - in r/a - out r/a
\def\blkio@io@param@define#1#2#3#4#5#6#7#8#9{
	\expandafter\def\csname blkio@io@text@#1@param\endcsname{
		{{#2}{#3}}
		{{#4}{#5}}
	}
	\expandafter\def\csname blkio@io@pin@#1@param\endcsname{
		{{#6}{#7}}
		{{#8}{#9}}
	}
}

\blkio@io@param@define{north}{90}{north east}{90}{north west}{-90}{south east}{90}{north west}
\blkio@io@param@define{south}{90}{north west}{90}{north east}{90}{north east}{-90}{south west}

\blkio@io@param@define{east}{0}{north east}{0}{north west}{180}{south east}{0}{north west}
\blkio@io@param@define{west}{0}{north west}{0}{north east}{0}{north east}{180}{south west}

\def\blkio@get@param#1#2#3{
	\expandafter\expandafter
	\csname blkio@param@#3\endcsname
	\csname blkio@io@#2@#1@param\endcsname
}

\def\blkio@param@in{
	\expandafter\pgfutil@firstoftwo
}
\def\blkio@param@out{
	\expandafter\pgfutil@secondoftwo
}

\def\blkio@text@param@parse#1#2{
	\def\blkiotextrotate{#1}
	\def\blkiotextanchor{#2}
}

\def\blkio@pin@param@parse#1#2{
	\def\blkiopinrotate{#1}
	\def\blkiopinanchor{#2}
}

\def\blkio@param@value#1{
	\expandafter\expandafter
	\csname blkio@#1@param@parse\endcsname
}

\def\blkiotextrotate{0}
\def\blkiotextanchor{center}
\def\blkiopinrotate{0}
\def\blkiopinanchor{center}

%
% ===================================== IO Pin Macro Standalone
%

\newcount\iopin@count

%
% #1 name
% #2 iopin param [north east west south]
% #3 growth from node dim
% #4 depth from node dim
%
\def\iopin@io@define#1#2#3#4{
	
	% Side Group Key
	\blkio@io@set{#1/.code={
			\csname blkio@io@#2@orientation\endcsname
			\def\blkio@create@iopin{\csname iopin@#1@create\endcsname}
		}
	}
	
	% Node Save
	\expandafter\def\csname iopin@#1@node@save\endcsname{
		\blkio@debug{Node #1 '\pgfpositionnodelatername'}
		
		\global\expandafter\edef\csname\@io@pin@prefix @node@name\endcsname{\pgfpositionnodelatername}
		\global\expandafter\edef\csname\@io@pin@prefix @node@minx\endcsname{\pgfpositionnodelaterminx}
		\global\expandafter\edef\csname\@io@pin@prefix @node@miny\endcsname{\pgfpositionnodelaterminy}
		\global\expandafter\edef\csname\@io@pin@prefix @node@maxx\endcsname{\pgfpositionnodelatermaxx}
		\global\expandafter\edef\csname\@io@pin@prefix @node@maxy\endcsname{\pgfpositionnodelatermaxy}
		\expandafter\newbox\csname\@io@pin@prefix @node@box\endcsname
		\global\setbox\csname\@io@pin@prefix @node@box\endcsname=\box\pgfpositionnodelaterbox
	}
	
	% create IO Pin
	\expandafter\def\csname iopin@#1@create\endcsname##1{
		\blkio@debug{Create #1 IO Pin '##1'}
		
		\advance\iopin@count by 1
		
		\@ifundefined{blkio@iopin@name}{
			\blkio@name@check{##1}{iopin\the\iopin@count}
		}{
			\let\blkio@name@def=\blkio@iopin@name
		}
		\let\blkio@iopin@name=\blkio@name@def
		
		\def\@io@pin@prefix{iopin@#1@io-\number\iopin@count}
		
		\ifblkio@io@dir@input
			\expandafter\def\csname\@io@pin@prefix @dir\endcsname{\blkio@io@dir@inputtrue}
			\edef\@io@text@param{\blkio@get@param{#2}{text}{in}}
			\edef\@io@pin@param{\blkio@get@param{#2}{pin}{in}}
		\else
			\expandafter\def\csname\@io@pin@prefix @dir\endcsname{\blkio@io@dir@inputfalse}
			\edef\@io@text@param{\blkio@get@param{#2}{text}{out}}
			\edef\@io@pin@param{\blkio@get@param{#2}{pin}{out}}
		\fi
		
		\blkio@param@value{text}\@io@text@param
		\blkio@param@value{pin}\@io@pin@param
		
		{
			\def\blkio@pos@node@later{\csname iopin@#1@node@save\endcsname}
			\pgfpositionnodelater{\blkio@pos@node@later}
			
			\node[every iopin text,
					rotate=\blkiotextrotate,
					anchor=\blkiotextanchor,
					blkio@style/.expand once=\blkio@io@text@style] (\blkio@name@def-text) {##1};
		}
		
		% calc node size
		\blkio@node@calc@dim{\@io@pin@prefix}
		
		\pgfmathsetlengthmacro\iopin@depth{\blkio@blk@in@sep + #4 + \blkio@blk@out@sep}
		
		% TODO use iopin in/out sep param
		\ifblkio@io@dir@input
			\edef\@io@text@depth@shift{ (\iopin@depth - \blkio@blk@in@sep) }
			\blkio@keydef{symbol distance}{\blkio@blk@in@sep}
		\else
			\edef\@io@text@depth@shift{ \blkio@blk@out@sep }
			\blkio@keydef{symbol distance}{\blkio@blk@out@sep}
		\fi
		
		\iopin@growth@init{#3}{#2}
		\csname blkio@io@#2@center@coord@growth\endcsname{\iopin@growth@shift}
		
		\def\iopinname{\blkio@name@def}
		\blkio@debug{Placing '\blkio@name@def' @( \the\blkio@io@place@x , \the\blkio@io@place@y )}
		
		% IO Text
		\csname blkio@io@#2@depth@shift\endcsname{\@io@text@depth@shift}
		\blkio@node@place{\@io@pin@prefix}{\blkio@io@place@shift@x}{\blkio@io@place@shift@y}
		\csname blkio@io@#2@center@coord@growth\endcsname{#3}
		% IO Pin
		\draw node[every iopin,
				rotate=\blkiopinrotate,
				anchor=\blkiopinanchor,
				blkio@style/.expand once=\blkio@io@pin@style,
				minimum width=\iopin@depth,
				minimum height=\blkio@io@space]
				at (\blkio@io@place@x,\blkio@io@place@y)
				(\iopinname) {};
	}
}

\iopin@io@define{above}{north}{\blkio@node@dim@x}{\blkio@node@dim@y}
\iopin@io@define{right}{east}{\blkio@node@dim@y}{\blkio@node@dim@x}
\iopin@io@define{left}{west}{\blkio@node@dim@y}{\blkio@node@dim@x}
\iopin@io@define{below}{south}{\blkio@node@dim@x}{\blkio@node@dim@y}

%
% ===================================== IO Pin Command
%

%default method
\def\blkio@create@iopin{\blkio@io@add}

\def\blkio@io@add#1{
	
}
	
\newcommand{\iopin}[2][]{
	\blkio@debug{IO Pin '#1' '#2'}
	\let\blkio@io@text@style=\empty
	\let\blkio@io@pin@style=\empty
	\let\blkio@io@link@style=\empty
	\iopin@set@at{\pgfqpoint{0pt}{0pt}}
	\blkio@io@set{in,#1}
	\blkio@create@iopin{#2}
	\ifblkio@io@dir@input
		\ifblkio@io@orientation@horz
			\expandafter\gdef\csname iopin@param@\blkio@iopin@name\endcsname{
				\blkio@io@dir@inputtrue
				\blkio@io@orientation@horztrue
				}
		\else
			\expandafter\gdef\csname iopin@param@\blkio@iopin@name\endcsname{
				\blkio@io@dir@inputtrue
				\blkio@io@orientation@horzfalse
			}
		\fi
	\else
		\ifblkio@io@orientation@horz
			\expandafter\gdef\csname iopin@param@\blkio@iopin@name\endcsname{
				\blkio@io@dir@inputfalse
				\blkio@io@orientation@horztrue
				}
		\else
			\expandafter\gdef\csname iopin@param@\blkio@iopin@name\endcsname{
				\blkio@io@dir@inputfalse
				\blkio@io@orientation@horzfalse
			}
		\fi
	\fi
	\let\blkio@iopin@name=\@undefined
}

%
% ===================================== Link IO CS
%

\newif\iflkio@orientation@horz

%
% ===================================== Link IO Keyes
%

\def\lkio@set#1{\pgfqkeys{/link io}{#1}}

\lkio@set{.unknown/.code={
	\blkio@PackageWarning{Unknown Link IO key `\pgfkeyscurrentkeyRAW` with value `#1` }
	}
}

\lkio@set{by/.code={
	\lkio@link@mid@set{#1}
	\def\lkio@mid@sym{.}
	\def\lkio@proc@mult{\lkio@proc@by}
	}
}

\lkio@set{via/.code={
	\lkio@link@mid@set{#1}
	\def\lkio@mid@sym{.}
	\def\lkio@proc@mult{\lkio@proc@via}
	}
}

\lkio@set{onto/.code={\def\lkio@proc@fromto{\lkio@proc@onto}}}

\lkio@set{mid/.code={
		% save partway placement
		\def\lkio@mid@val{#1}
		\def\lkio@mid@sym{.}
		\def\lkio@proc@mult{\lkio@proc@partway}
	}
}

\lkio@set{H/.code=\lkio@orientation@horztrue}
\lkio@set{V/.code=\lkio@orientation@horzfalse}
% by default
\lkio@orientation@horztrue

%
% ===================================== Link IO Macro
%

\def\lkio@from@sym{.}
\let\lkio@mid@sym=\@undefined
\def\lkio@to@sym{.}


\def\lkio@link@mid@set#1{
	\tikz@scan@one@point\lkio@link@mid@set@#1
}
\def\lkio@link@mid@set@#1{
	% Generate \pgf@x,\pgf@y which is #1
	#1
	\coordinate (lkio@mid) at (\pgf@x,\pgf@y);
	\def\lkio@link@mid{lkio@mid}
}


\def\lkio@process@from#1{
	\ifcsname iopin@param@#1\endcsname
		\csname iopin@param@#1\endcsname
		\ifblkio@io@dir@input
			\def\lkio@link@from{#1.out}
		\else
			% todo fix
			%\def\lkio@link@from{#1.in}
			\def\lkio@link@from{#1.out}
		\fi
		\ifblkio@io@orientation@horz
			\def\lkio@from@sym{-}
		\else
			\def\lkio@from@sym{|}
		\fi
	\else
		\def\lkio@from@sym{.}
		\def\lkio@link@from{#1}
	\fi
}

\def\lkio@process@to#1{
	\ifcsname iopin@param@#1\endcsname
		\csname iopin@param@#1\endcsname
		\ifblkio@io@dir@input
			% todo fix
			%\def\lkio@link@to{#1.out}
			\def\lkio@link@to{#1.in}
		\else
			\def\lkio@link@to{#1.in}
		\fi
		\ifblkio@io@orientation@horz
			\def\lkio@to@sym{-}
		\else
			\def\lkio@to@sym{|}
		\fi
	\else
		\def\lkio@to@sym{.}
		\def\lkio@link@to{#1}
	\fi
}

\def\lkio@sym@test#1#2#3{
	\edef\lkio@sym@check{#1}
	\ifx\lkio@sym@check\lkio@sym%
	#2
	\else
	#3
	\fi
}

\def\lkio@sym@proc#1{
	\edef\lkio@sym{#1}
	\lkio@sym@test{|.}{\def\lkio@sym{|-}}{}
	\lkio@sym@test{.|}{\def\lkio@sym{-|}}{}
	\lkio@sym@test{.-}{\def\lkio@sym{|-}}{}
	\lkio@sym@test{-.}{\def\lkio@sym{-|}}{}
	\iflkio@orientation@horz
		\lkio@sym@test{..}{\def\lkio@sym{-|}}{}
	\else
		\lkio@sym@test{..}{\def\lkio@sym{|-}}{}
	\fi
}

% #1 - path var
% #2 - from
% #3 - to
% #4 - sym
\def\lkio@proc@topoint#1#2#3#4{
	\lkio@sym@proc{#4}
	\edef#1{ (#2) -- (#2\lkio@sym#3) -- (#3) }
}

\def\lkio@proc@start#1#2#3#4{
	\lkio@sym@proc{#4}
	\edef#1{ (#2) -- (#2\lkio@sym#3) }
}

\def\lkio@proc@end#1#2#3#4{
	\lkio@sym@proc{#4}
	\edef#1{ (#2\lkio@sym#3) -- (#3) }
}

\def\lkio@proc@by{
	\lkio@proc@topoint{\lkio@parta}{\lkio@link@from}{\lkio@link@mid}{\lkio@from@sym\lkio@mid@sym}
	\lkio@proc@end{\lkio@partb}{\lkio@link@mid}{\lkio@link@to}{\lkio@mid@sym\lkio@to@sym}
	\def\lkio@mid@path{\lkio@parta -- \lkio@partb}
}

\def\lkio@proc@via{
	\lkio@proc@start{\lkio@parta}{\lkio@link@from}{\lkio@link@mid}{\lkio@from@sym\lkio@mid@sym}
	% flip orientation for second part
	\iflkio@orientation@horz
		\lkio@orientation@horzfalse
	\else
		\lkio@orientation@horztrue
	\fi
	\lkio@proc@end{\lkio@partb}{\lkio@link@mid}{\lkio@link@to}{\lkio@mid@sym\lkio@to@sym}
	\def\lkio@mid@path{\lkio@parta -- \lkio@partb}
}

\def\lkio@proc@onto{
	\lkio@proc@start{\lkio@fromto@path}{\lkio@link@from}{\lkio@link@to}{\lkio@from@sym.}
}

% just from -> to
\def\lkio@proc@fromto{
	\lkio@proc@topoint{\lkio@fromto@path}{\lkio@link@from}{\lkio@link@to}{\lkio@from@sym\lkio@to@sym}
}

\def\lkio@proc@partway{
	\coordinate (lkio@mid) at ($(\lkio@link@from)!\lkio@mid@val!(\lkio@link@to)$);
	\def\lkio@link@mid{lkio@mid}
	% overide the symbol to match a partway placement
	\edef\lkio@sym{\lkio@from@sym\lkio@to@sym}
	\lkio@sym@test{|.}{\edef\lkio@to@sym{|}}{}
	\lkio@sym@test{.|}{\edef\lkio@from@sym{|}}{}
	\lkio@sym@test{.-}{\edef\lkio@from@sym{-}}{}
	\lkio@sym@test{-.}{\edef\lkio@to@sym{-}}{}
	
	\iflkio@orientation@horz
		\lkio@sym@test{..}{\edef\lkio@to@sym{-}}{}
	\else
		\lkio@sym@test{..}{\edef\lkio@to@sym{|}}{}
	\fi
	
	\lkio@proc@by
}

%
% =====================================  Link IO Command
%

\newcommand{\linkio}[3][]{
	{
		% allow search in /link io keys
		\tikzset{.search also={/link io}}
		% Process option that are needed before
		\tikzset{#1}
		
		\lkio@process@from{#2}
		\lkio@process@to{#3}
		
		% select a default orientation
		\edef\lkio@sym{\lkio@from@sym\lkio@to@sym}
		\lkio@sym@test{-.}{\lkio@orientation@horztrue}
		{
			\lkio@sym@test{|.}{\lkio@orientation@horzfalse}
			{
				\lkio@sym@test{.-}{\lkio@orientation@horztrue}
				{
					\lkio@sym@test{.|}{\lkio@orientation@horzfalse}
					{
						% keep default
					}
				}
			}
		}
		
		\@ifundefined{lkio@mid@sym}
		{
			\coordinate (lkio@mid) at ($(\lkio@link@from)!0.5!(\lkio@link@to)$);
			\def\lkio@link@mid{lkio@mid}
			
			\edef\lkio@sym{\lkio@from@sym\lkio@to@sym}
			\lkio@sym@test{--}{
				\def\lkio@mid@sym{.}
				\def\lkio@proc@mult{\lkio@proc@by}
			}{}
			\lkio@sym@test{||}{
				\def\lkio@mid@sym{.}
				\def\lkio@proc@mult{\lkio@proc@by}
			}{}
		}
		
		\@ifundefined{lkio@mid@sym}
		{
			\lkio@proc@fromto
			\draw[every link,#1] \lkio@fromto@path;
		}
		{
			\lkio@proc@mult
			\draw[every link,#1] \lkio@mid@path;
		}
		
	}
}

%
% ===================================== Block Shapes
%

\pgfdeclareshape{ioblock}{

	\savedmacro\blk@in@width{
        \pgfmathsetlengthmacro{\blk@in@width}{\blkio@blk@width}
	}
	
	\savedmacro\blk@out@w{
        \pgfmathsetlengthmacro{\blk@out@w}{ -0.5*\blk@in@width - \blkio@blk@west@depth - \blkio@blk@outer@sep }
	}
	
	\savedmacro\blk@out@e{
        \pgfmathsetlengthmacro{\blk@out@e}{ 0.5*\blk@in@width + \blkio@blk@east@depth + \blkio@blk@outer@sep }
	}
	
	\savedmacro\blk@in@height{
        \pgfmathsetlengthmacro{\blk@in@height}{\blkio@blk@height}
	}
	
	\savedmacro\blk@out@n{
        \pgfmathsetlengthmacro{\blk@out@n}{ 0.5*\blk@in@height + \blkio@blk@north@depth + \blkio@blk@outer@sep }
	}
	
	\savedmacro\blk@out@s{
        \pgfmathsetlengthmacro{\blk@out@s}{ -0.5*\blk@in@height - \blkio@blk@south@depth - \blkio@blk@outer@sep }
	}
	
	\savedmacro\blk@name{
		\edef\blk@name{\blkio@blk@name}
	}
	
	\anchor{center}{
		\pgfqpoint{0pt}{0pt}
	}
	
	\anchor{block center}{
		\pgfqpoint{0pt}{0pt}
	}
	
	\anchor{north}{
		\pgfqpoint{0pt}{\blk@out@n}
	}
	\anchor{north west}{
		\pgfqpoint{\blk@out@w}{\blk@out@n}
	}
	
	\anchor{west}{
		\pgfqpoint{\blk@out@w}{0pt}
	}
	\anchor{north east}{
		\pgfqpoint{\blk@out@e}{\blk@out@n}
	}
	
	\anchor{south}{
		\pgfqpoint{0pt}{\blk@out@s}
	}
	\anchor{south west}{
		\pgfqpoint{\blk@out@w}{\blk@out@s}
	}
	
	\anchor{east}{
		\pgfqpoint{\blk@out@e}{0pt}
	}
	\anchor{south east}{
		\pgfqpoint{\blk@out@e}{\blk@out@s}
	}

	%
	% Like Shape Regular Polygon
	% defining corners anchor based on the IOPin present on each sides
    %
    \expandafter\pgfutil@g@addto@macro\csname pgf@sh@s@ioblock\endcsname{%
		%NE
	    \c@pgf@counta\blkio@blk@east@count\relax%
		\advance\c@pgf@counta\blkio@blk@north@count\relax%
        \pgfmathloop%
			\ifnum\c@pgf@counta>0\relax%
			\pgfutil@ifundefined{pgf@anchor@ioblock@ne\the\c@pgf@counta}%
			{%
				%
                % ...(manually \xdef as \gdef is normally used by \anchor)...
                %
                \expandafter\xdef\csname pgf@anchor@ioblock@ne\the\c@pgf@counta\endcsname{%
                    \noexpand\pgfpoint{\noexpand\blk@out@e+\the\c@pgf@counta*\noexpand\blkio@io@space}{\noexpand\blk@out@n+\the\c@pgf@counta*\noexpand\blkio@io@space}
                }%
			}
			{\c@pgf@counta0\relax}%
			\advance\c@pgf@counta-1\relax%
        \repeatpgfmathloop%
		%SE
	    \c@pgf@counta\blkio@blk@east@count\relax%
		\advance\c@pgf@counta\blkio@blk@south@count\relax%
        \pgfmathloop%
			\ifnum\c@pgf@counta>0\relax%
			\pgfutil@ifundefined{pgf@anchor@ioblock@se\the\c@pgf@counta}%
			{%
                \expandafter\xdef\csname pgf@anchor@ioblock@se\the\c@pgf@counta\endcsname{%
                    \noexpand\pgfpoint{\noexpand\blk@out@e+\the\c@pgf@counta*\noexpand\blkio@io@space}{\noexpand\blk@out@s-\the\c@pgf@counta*\noexpand\blkio@io@space}
                }%
			}
			{\c@pgf@counta0\relax}%
			\advance\c@pgf@counta-1\relax%
        \repeatpgfmathloop%
		%SW
	    \c@pgf@counta\blkio@blk@west@count\relax%
		\advance\c@pgf@counta\blkio@blk@south@count\relax%
        \pgfmathloop%
			\ifnum\c@pgf@counta>0\relax%
			\pgfutil@ifundefined{pgf@anchor@ioblock@sw\the\c@pgf@counta}%
			{%
                \expandafter\xdef\csname pgf@anchor@ioblock@sw\the\c@pgf@counta\endcsname{%
                    \noexpand\pgfpoint{\noexpand\blk@out@w-\the\c@pgf@counta*\noexpand\blkio@io@space}{\noexpand\blk@out@s-\the\c@pgf@counta*\noexpand\blkio@io@space}
                }%
			}
			{\c@pgf@counta0\relax}%
			\advance\c@pgf@counta-1\relax%
        \repeatpgfmathloop%
		%NW
	    \c@pgf@counta\blkio@blk@west@count\relax%
		\advance\c@pgf@counta\blkio@blk@north@count\relax%
        \pgfmathloop%
			\ifnum\c@pgf@counta>0\relax%
			\pgfutil@ifundefined{pgf@anchor@ioblock@nw\the\c@pgf@counta}%
			{%
                \expandafter\xdef\csname pgf@anchor@ioblock@nw\the\c@pgf@counta\endcsname{%
                    \noexpand\pgfpoint{\noexpand\blk@out@w-\the\c@pgf@counta*\noexpand\blkio@io@space}{\noexpand\blk@out@n+\the\c@pgf@counta*\noexpand\blkio@io@space}
                }%
			}
			{\c@pgf@counta0\relax}%
			\advance\c@pgf@counta-1\relax%
        \repeatpgfmathloop%
    }%
	
	\anchor{block north}{
		\pgfpoint{0pt}{0.5*\blk@in@height}
	}
	\anchor{block north west}{
		\pgfpoint{-0.5*\blk@in@width}{0.5*\blk@in@height}
	}
	\anchor{block west}{
		\pgfpoint{-0.5*\blk@in@width}{0pt}
	}
	\anchor{block north east}{
		\pgfpoint{0.5*\blk@in@width}{0.5*\blk@in@height}
	}
	\anchor{block south}{
		\pgfpoint{0pt}{-0.5*\blk@in@height}
	}
	\anchor{block south west}{
		\pgfpoint{-0.5*\blk@in@width}{-0.5*\blk@in@height}
	}
	\anchor{block east}{
		\pgfpoint{0.5*\blk@in@width}{0pt}
	}
	\anchor{block south east}{
		\pgfpoint{0.5*\blk@in@width}{-0.5*\blk@in@height}
	}
	
	% Border is from the shape node
	\anchorborder{%
		%
        % Save x and y.
        %
		\pgf@xa\pgf@x\relax%
        \pgf@ya\pgf@y\relax%
		\pgfpointanchor{\blk@name}{center}
		\edef\centerx{\the\pgf@x}%
        \edef\centery{\the\pgf@y}%
        \advance\pgf@xa\centerx
        \advance\pgf@ya\centery
		\pgfpointshapeborder{\blk@name-shape}{\pgfqpoint{\pgf@xa}{\pgf@ya}}
        \advance\pgf@x-\centerx
        \advance\pgf@y-\centery
	}%
	
	\backgroundpath{
		\pgfpathrectanglecorners{\pgfpoint{-0.5*\blk@in@width}{0.5*\blk@in@height}}{\pgfpoint{0.5*\blk@in@width}{-0.5*\blk@in@height}}
		
		\pgfpathrectanglecorners{\pgfpoint{\blk@out@w}{\blk@out@n}}{\pgfpoint{\blk@out@e}{\blk@out@s}}
	}
}

%
% ===================================== IOPin Shapes
%

\pgfdeclareshape{iopin}{
	\inheritsavedanchors[from=rectangle]
	\inheritanchor[from=rectangle]{north west}
	\inheritanchor[from=rectangle]{south west}
	\inheritanchor[from=rectangle]{north east}
	\inheritanchor[from=rectangle]{south east}

	\savedmacro\iopin@height{
		\pgfmathsetlengthmacro{\iopin@height}{\pgfkeysvalueof{/pgf/minimum height}}
	}
	\savedmacro\iopin@width{
		\pgfmathsetlengthmacro{\iopin@width}{\pgfkeysvalueof{/pgf/minimum width}}
	}

	\savedmacro\iopin@in{
		\pgfextract@process\iopin@in{%
			\pgf@y=0pt
			\pgfmathsetlength\pgf@x{\iopin@width}
			\pgf@x=-0.5\pgf@x%
        }%
	}
	
	\savedanchor\in{
		\iopin@in
	}
	\savedanchor\insymbol{
		\iopin@in
		\advance\pgf@x by \blkiovalueof{symbol distance}
	}
	\savedanchor\outsymbol{
		\iopin@in
		\advance\pgf@x by \blkiovalueof{symbol distance}
		\advance\pgf@x by \iopin@height
	}
	
	\savedanchor\symbol{
		\iopin@in
		\pgfmathsetlength\pgf@x{\pgf@x + 0.5*\iopin@height + \blkiovalueof{symbol distance}}
	}	
	
	\anchor{symbol}{
		\symbol
	}%		
	
	\anchor{in}{
		\in
	}%
	\anchor{symbol in}{
		\insymbol
	}%
	\anchor{symbol out}{
		\outsymbol
	}%
	\anchor{out}{
		\pgfpointscale{-1}{\iopin@in}
	}%

	\backgroundpath{
		\pgfpathmoveto{\in}		
		\pgfpathlineto{\insymbol}
		\pgfpathmoveto{\outsymbol}
		\pgfpathlineto{\pgfpointscale{-1}{\in}}
	}

	\foregroundpath{
		\pgfpathmoveto{\insymbol}
		\pgfpathlineto{\pgfpointadd{\insymbol}{\pgfpointpolar{110}{0.4*\iopin@height}}}		
		\pgfpathlineto{\outsymbol}
		\pgfpathlineto{\pgfpointadd{\insymbol}{\pgfpointpolar{-110}{0.4*\iopin@height}}}
		\pgfpathclose
	}
}


\pgfdeclareshape{ioduplex}{
	\inheritsavedanchors[from=iopin]
	\inheritanchor[from=iopin]{north west}
	\inheritanchor[from=iopin]{south west}
	\inheritanchor[from=iopin]{north east}
	\inheritanchor[from=iopin]{south east}
	\inheritanchor[from=iopin]{in}
	\inheritanchor[from=iopin]{out}
	\inheritanchor[from=iopin]{symbol in}

	\savedanchor\symbol{
		\iopin@in
		\advance\pgf@x by \blkiovalueof{symbol distance}
		\pgfmathsetlengthmacro{\out}{0.8*\iopin@height}
		\advance\pgf@x by \out
	}
	
	\savedanchor\outsymbol{
		\iopin@in
		\advance\pgf@x by \blkiovalueof{symbol distance}
		\pgfmathsetlengthmacro{\out}{1.6*\iopin@height}
		\advance\pgf@x by \out
	}
	
	\anchor{symbol}{
		\symbol
	}%	
	
	\anchor{outsymbol}{
		\outsymbol
	}%
	
	\backgroundpath{
			\pgfpathmoveto{\in}
			\pgfpathlineto{\insymbol}
			\pgfpathmoveto{\outsymbol}
			\pgfpathlineto{\pgfpointadd{\insymbol}{\pgfpoint{0.8*\iopin@height}{0.4*\iopin@height}}}
			\pgfpathlineto{\insymbol}
			\pgfpathlineto{\pgfpointadd{\insymbol}{\pgfpoint{0.8*\iopin@height}{-0.4*\iopin@height}}}
			\pgfpathclose
			\pgfpathlineto{\pgfpointscale{-1}{\in}}
	}
}

\pgfdeclareshape{ioline}{
	\inheritsavedanchors[from=iopin]
	\inheritanchor[from=iopin]{north west}
	\inheritanchor[from=iopin]{south west}
	\inheritanchor[from=iopin]{north east}
	\inheritanchor[from=iopin]{south east}
	\inheritanchor[from=iopin]{in}
	\inheritanchor[from=iopin]{out}
	\inheritanchor[from=iopin]{symbol}
	
	\backgroundpath{
		\pgfpathmoveto{\in}		
		\pgfpathlineto{\pgfpointscale{-1}{\in}}
	}
}

%
% ===================================== IO Pin & Link Style
%

% ------------ Event

\tikzset{LKEvent/.style={
	dashed
}}

\blkioset{IOEvent/.style={/blkio/io/.cd,
	style={
		LKEvent,ioline,
		append after command={ node[draw,dart,fill=white,
									font=\tiny,
									inner sep=1pt,
									outer sep=0mm,
									minimum size=2.6mm,
									rotate=\blkiopinrotate] 
									at (\tikzlastnode.symbol) {} }
		},
	link style={LKEvent}
}}


% ------------ Signal

\tikzset{LKSignal/.style={
	% keep default
}}

\blkioset{IOSignal/.style={/blkio/io/.cd,
	style={
		LKSignal,fill=white
	},
	link style={
		LKSignal
	}
}}

% ------------ Duplex

\tikzset{LKDuplex/.style={
	thick
}}

\blkioset{IODuplex/.style={/blkio/io/.cd,
	style={
		LKDuplex,ioduplex,fill=white
	},
	link style={
		LKDuplex
	}
}}

% ------------ Data

\tikzset{LKData/.style={
	thick
}}

\blkioset{IOData/.style={/blkio/io/.cd,
	style={
		LKData,fill=black
	},
	link style={
		LKData
	}
}}

% ------------ Proto

\tikzset{LKProto/.style={
	double,double distance=1mm,line width=1pt,
}}

\blkioset{IOProto/.style={/blkio/io/.cd,
	style={
		LKProto,ioline,
		append after command={ node[draw,diamond,fill=black,LKProto,double distance=0.5mm,
									font=\tiny,
									inner sep=0.05pt,
									outer sep=0mm,
									minimum height=1.6mm,
									minimum width=4mm,
									rotate=\blkiopinrotate] 
									at (\tikzlastnode.symbol) {} }
		},
	link style={LKProto}
}}


